#!/usr/bin/env node

/**
 * Module dependencies.
 */

const Chat = require("../database/models/Chat");

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
const { MONGODB_CONNECTION_STRING, PORT } = require("../config/index");
const database = require("../database/db");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(PORT);
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = new Server(server, {
  cors: {
    origin: "*",
  },
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

io.on('connection', (socket) => {
  console.log('A user connected');

  socket.on('joinRoom', (chatId) => {
    socket.join(chatId);
  });

  socket.on('chatMessage', async ({ chatId, sender, receiver, message }) => {
    const chat = await Chat.findById(chatId);
    if (chat) {
      const newMessage = { sender, receiver, message, timestamp: new Date() };
      console.log("newMessage: ", newMessage)
      const chat2 = await Chat.findOneAndUpdate(
        { _id: chatId },
        {
          $push: {
            messages: newMessage,
          },
        },
        { new: true }
      );
      console.log("chat: ", chat2)
      io.to(chatId).emit('message', newMessage);
    }
  });

  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`Server standing ${port} port`);
  database.connect(MONGODB_CONNECTION_STRING);
}
