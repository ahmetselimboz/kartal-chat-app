#!/usr/bin/env node

/**
 * Module dependencies.
 */

const mongoose = require("mongoose");

const User = require("../database/models/Users");
const Chat = require("../database/models/Chat");

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
const { MONGODB_CONNECTION_STRING, PORT } = require("../config/index");
const database = require("../database/db");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(PORT);
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = new Server(server, {
  cors: {
    origin: "*",
  },
});
let users = {};
const connectedUsers = new Set();
io.on("connection", (socket) => {
  connectedUsers.add(socket.id);
  console.log("A user connected. Total connected users:", connectedUsers.size);

  socket.on("joinRoom", (chatId) => {
    socket.join(chatId);
  });

  socket.on("register", (userId) => {
    if(userId != null){
      users[userId] = socket.id;
      console.log(users);
    }
  });

  socket.on(
    "sendNotification",
    async ({ senderId, receiverId, senderUsername, slug }) => {
      console.log("receiverId: ", receiverId);
      if (users[senderId]) {
        await User.findOneAndUpdate(
          { _id: receiverId },
          {
            $push: {
              notification: { slug, senderId, senderUsername, readed: false },
            },
          },
          { new: true }
        );

        const result = await User.findOne(
          { _id: receiverId, "notification.senderUsername": senderUsername },
          { "notification.$": 1 }
        );

        return io.to(users[receiverId]).emit("receiveNotification", {
          _id: result.notification[0]._id,
          senderId,
          slug,
          senderUsername,
          readed: false,
        });
      }
    }
  );

  socket.on(
    "chatMessage",
    async ({ chatId, sender, receiver, message, seen }) => {
      const chat = await Chat.findById(chatId);
      if (chat) {
        const newMessage = {
          _id: new mongoose.Types.ObjectId(),
          sender,
          receiver,
          message,
          timestamp: new Date(),
          seen,
        };
        const result = await Chat.findOneAndUpdate(
          { _id: chatId },
          { $push: { messages: newMessage } },
          { new: true }
        );
        console.log(newMessage);
        io.to(chatId).emit("message", newMessage);
      }
    }
  );

  // socket.on("notify", async ({ chatId, sender, receiver, message }) => {
  //   const chat = await Chat.findById(chatId);
  //   if (chat) {
  //     const newMessage = { sender, receiver, message, timestamp: new Date() };
  //     await Chat.findOneAndUpdate(
  //       { _id: chatId },
  //       { $push: { messages: newMessage } },
  //       { new: true }
  //     );
  //     console.log(newMessage);
  //     io.to(chatId).emit("newNotify", newMessage);
  //   }
  // });

  socket.on("typingUser", ({ chatId, userId, senderId, isTyping }) => {
    io.to(chatId).emit("typing", { chatId, userId, senderId, isTyping });
  });

  socket.on("inChat", ({ chatId, userId, senderId, inChat }) => {
    io.to(chatId).emit("inChatUser", { chatId, userId, senderId, inChat });
  });

  socket.on("user-connected", async (userId) => {
    console.log("user-connected: ", userId);
    if (userId) {
      await User.findByIdAndUpdate(userId, { userStatus: true });
    }

    io.emit("user-status", { userId, status: true });
  });

  socket.on("messagesSeen", async ({ chatId, messageIds }) => {
    try {
      const result = await Chat.updateMany(
        { _id: chatId, "messages._id": { $in: messageIds } },
        { $set: { "messages.$.seen": true } },
        { new: true }
      );

      console.log(result);
      io.to(chatId).emit("messagesSeen", { messageIds });
    } catch (err) {
      console.error("Failed to update message seen status", err);
    }
  });

  socket.on("disconnect", async () => {
    for (let userId in users) {
      if (users[userId] === socket.id) {
        console.log("userId: ", userId);
        if (userId != null) {
          await User.findByIdAndUpdate(userId, { userStatus: false });
        }

        delete users[userId];
        connectedUsers.delete(socket.id);
        io.emit("user-status", { userId, status: false });
      }
    }
    console.log(
      "A user disconnected. Total connected users:",
      connectedUsers.size
    );
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`Server standing ${port} port`);
  database.connect(MONGODB_CONNECTION_STRING);
}
